// Generated by gencpp from file launchtest/FirstResponse.msg
// DO NOT EDIT!


#ifndef LAUNCHTEST_MESSAGE_FIRSTRESPONSE_H
#define LAUNCHTEST_MESSAGE_FIRSTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace launchtest
{
template <class ContainerAllocator>
struct FirstResponse_
{
  typedef FirstResponse_<ContainerAllocator> Type;

  FirstResponse_()
    : ans(0.0)  {
    }
  FirstResponse_(const ContainerAllocator& _alloc)
    : ans(0.0)  {
  (void)_alloc;
    }



   typedef float _ans_type;
  _ans_type ans;





  typedef boost::shared_ptr< ::launchtest::FirstResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::launchtest::FirstResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FirstResponse_

typedef ::launchtest::FirstResponse_<std::allocator<void> > FirstResponse;

typedef boost::shared_ptr< ::launchtest::FirstResponse > FirstResponsePtr;
typedef boost::shared_ptr< ::launchtest::FirstResponse const> FirstResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::launchtest::FirstResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::launchtest::FirstResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::launchtest::FirstResponse_<ContainerAllocator1> & lhs, const ::launchtest::FirstResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ans == rhs.ans;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::launchtest::FirstResponse_<ContainerAllocator1> & lhs, const ::launchtest::FirstResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace launchtest

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::launchtest::FirstResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::launchtest::FirstResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::launchtest::FirstResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::launchtest::FirstResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::launchtest::FirstResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::launchtest::FirstResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::launchtest::FirstResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ae19f1c6e8949b16d86c81eddf22ba6";
  }

  static const char* value(const ::launchtest::FirstResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ae19f1c6e8949b1ULL;
  static const uint64_t static_value2 = 0x6d86c81eddf22ba6ULL;
};

template<class ContainerAllocator>
struct DataType< ::launchtest::FirstResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "launchtest/FirstResponse";
  }

  static const char* value(const ::launchtest::FirstResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::launchtest::FirstResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ans\n"
"\n"
;
  }

  static const char* value(const ::launchtest::FirstResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::launchtest::FirstResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ans);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FirstResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::launchtest::FirstResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::launchtest::FirstResponse_<ContainerAllocator>& v)
  {
    s << indent << "ans: ";
    Printer<float>::stream(s, indent + "  ", v.ans);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAUNCHTEST_MESSAGE_FIRSTRESPONSE_H
