// Generated by gencpp from file pow_service/firstResponse.msg
// DO NOT EDIT!


#ifndef POW_SERVICE_MESSAGE_FIRSTRESPONSE_H
#define POW_SERVICE_MESSAGE_FIRSTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pow_service
{
template <class ContainerAllocator>
struct firstResponse_
{
  typedef firstResponse_<ContainerAllocator> Type;

  firstResponse_()
    : ans(0)
    , anss(0)  {
    }
  firstResponse_(const ContainerAllocator& _alloc)
    : ans(0)
    , anss(0)  {
  (void)_alloc;
    }



   typedef int32_t _ans_type;
  _ans_type ans;

   typedef int32_t _anss_type;
  _anss_type anss;





  typedef boost::shared_ptr< ::pow_service::firstResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pow_service::firstResponse_<ContainerAllocator> const> ConstPtr;

}; // struct firstResponse_

typedef ::pow_service::firstResponse_<std::allocator<void> > firstResponse;

typedef boost::shared_ptr< ::pow_service::firstResponse > firstResponsePtr;
typedef boost::shared_ptr< ::pow_service::firstResponse const> firstResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pow_service::firstResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pow_service::firstResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pow_service::firstResponse_<ContainerAllocator1> & lhs, const ::pow_service::firstResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ans == rhs.ans &&
    lhs.anss == rhs.anss;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pow_service::firstResponse_<ContainerAllocator1> & lhs, const ::pow_service::firstResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pow_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pow_service::firstResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pow_service::firstResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pow_service::firstResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pow_service::firstResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pow_service::firstResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pow_service::firstResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pow_service::firstResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f779ceb789f558662afb61bf76076cd0";
  }

  static const char* value(const ::pow_service::firstResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf779ceb789f55866ULL;
  static const uint64_t static_value2 = 0x2afb61bf76076cd0ULL;
};

template<class ContainerAllocator>
struct DataType< ::pow_service::firstResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pow_service/firstResponse";
  }

  static const char* value(const ::pow_service::firstResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pow_service::firstResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ans\n"
"int32 anss\n"
"\n"
;
  }

  static const char* value(const ::pow_service::firstResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pow_service::firstResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ans);
      stream.next(m.anss);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct firstResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pow_service::firstResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pow_service::firstResponse_<ContainerAllocator>& v)
  {
    s << indent << "ans: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ans);
    s << indent << "anss: ";
    Printer<int32_t>::stream(s, indent + "  ", v.anss);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POW_SERVICE_MESSAGE_FIRSTRESPONSE_H
